{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/Rohan/Documents/GitHub/newNebulaRepository/node_modules/react-native-spinkit/index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport ReactNative from \"react-native-web/dist/index\";\nimport PropTypes from 'prop-types';\nvar NativeModules = ReactNative.NativeModules,\n    processColor = ReactNative.processColor,\n    requireNativeComponent = ReactNative.requireNativeComponent,\n    View = ReactNative.View;\nvar RNSpinkit = null;\n\nvar Spinkit = function (_React$Component) {\n  _inherits(Spinkit, _React$Component);\n\n  var _super = _createSuper(Spinkit);\n\n  function Spinkit() {\n    _classCallCheck(this, Spinkit);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Spinkit, [{\n    key: \"render\",\n    value: function render() {\n      if (!this.props.isVisible) return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 37\n        }\n      });\n      var size = {\n        height: this.props.size,\n        width: this.props.size\n      };\n      var colorNumber = processColor(this.props.color);\n      return React.createElement(RNSpinkit, {\n        type: String(this.props.type),\n        size: parseInt(this.props.size),\n        color: colorNumber,\n        style: [size, this.props.style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 4\n        }\n      });\n    }\n  }]);\n\n  return Spinkit;\n}(React.Component);\n\nSpinkit.propTypes = {\n  type: PropTypes.string,\n  color: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  size: PropTypes.number,\n  isVisible: PropTypes.bool,\n  testID: PropTypes.string,\n  accessibilityComponentType: PropTypes.string,\n  accessibilityLabel: PropTypes.string,\n  accessibilityLiveRegion: PropTypes.string,\n  renderToHardwareTextureAndroid: PropTypes.bool,\n  importantForAccessibility: PropTypes.string,\n  onLayout: PropTypes.func\n};\nSpinkit.defaultProps = {\n  size: 37,\n  color: \"#000000\",\n  isVisible: true\n};\nNativeModules.RNSpinkit;\nRNSpinkit = requireNativeComponent('RNSpinkit', Spinkit, {\n  nativeOnly: {\n    'nativeID': true\n  }\n});\nmodule.exports = Spinkit;","map":{"version":3,"sources":["/Users/Rohan/Documents/GitHub/newNebulaRepository/node_modules/react-native-spinkit/index.js"],"names":["React","ReactNative","PropTypes","NativeModules","processColor","requireNativeComponent","View","RNSpinkit","Spinkit","props","isVisible","size","height","width","colorNumber","color","String","type","parseInt","style","Component","propTypes","string","oneOfType","number","bool","testID","accessibilityComponentType","accessibilityLabel","accessibilityLiveRegion","renderToHardwareTextureAndroid","importantForAccessibility","onLayout","func","defaultProps","nativeOnly","module","exports"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;OACOC,W;AACP,OAAOC,SAAP,MAAsB,YAAtB;IAGCC,a,GAIGF,W,CAJHE,a;IACAC,Y,GAGGH,W,CAHHG,Y;IACAC,sB,GAEGJ,W,CAFHI,sB;IACAC,I,GACGL,W,CADHK,I;AAGD,IAAIC,SAAS,GAAG,IAAhB;;IAEMC,O;;;;;;;;;;;;;6BA8BI;AACR,UAAI,CAAC,KAAKC,KAAL,CAAWC,SAAhB,EAA2B,OAAO,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAE3B,UAAIC,IAAI,GAAG;AAACC,QAAAA,MAAM,EAAE,KAAKH,KAAL,CAAWE,IAApB;AAA0BE,QAAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWE;AAA5C,OAAX;AAOA,UAAIG,WAAW,GAAGV,YAAY,CAAC,KAAKK,KAAL,CAAWM,KAAZ,CAA9B;AAEA,aACC,oBAAC,SAAD;AACC,QAAA,IAAI,EAAEC,MAAM,CAAC,KAAKP,KAAL,CAAWQ,IAAZ,CADb;AAEC,QAAA,IAAI,EAAEC,QAAQ,CAAC,KAAKT,KAAL,CAAWE,IAAZ,CAFf;AAGC,QAAA,KAAK,EAAEG,WAHR;AAIC,QAAA,KAAK,EAAE,CAACH,IAAD,EAAO,KAAKF,KAAL,CAAWU,KAAlB,CAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD;AAOA;;;;EAjDoBnB,KAAK,CAACoB,S;;AAAtBZ,O,CAEEa,S,GAAY;AAClBJ,EAAAA,IAAI,EAAEf,SAAS,CAACoB,MADE;AAUlBP,EAAAA,KAAK,EAAEb,SAAS,CAACqB,SAAV,CAAoB,CAACrB,SAAS,CAACoB,MAAX,EAAmBpB,SAAS,CAACsB,MAA7B,CAApB,CAVW;AAWlBb,EAAAA,IAAI,EAAET,SAAS,CAACsB,MAXE;AAYlBd,EAAAA,SAAS,EAAER,SAAS,CAACuB,IAZH;AAalBC,EAAAA,MAAM,EAAExB,SAAS,CAACoB,MAbA;AAclBK,EAAAA,0BAA0B,EAAEzB,SAAS,CAACoB,MAdpB;AAelBM,EAAAA,kBAAkB,EAAE1B,SAAS,CAACoB,MAfZ;AAgBlBO,EAAAA,uBAAuB,EAAE3B,SAAS,CAACoB,MAhBjB;AAiBlBQ,EAAAA,8BAA8B,EAAE5B,SAAS,CAACuB,IAjBxB;AAkBlBM,EAAAA,yBAAyB,EAAE7B,SAAS,CAACoB,MAlBnB;AAmBlBU,EAAAA,QAAQ,EAAE9B,SAAS,CAAC+B;AAnBF,C;AAFdzB,O,CAwBE0B,Y,GAAe;AACrBvB,EAAAA,IAAI,EAAE,EADe;AAErBI,EAAAA,KAAK,EAAE,SAFc;AAGrBL,EAAAA,SAAS,EAAE;AAHU,C;AA+BvBP,aAAa,CAACI,SAAd;AAGAA,SAAS,GAAGF,sBAAsB,CACjC,WADiC,EAEjCG,OAFiC,EAG9B;AACI2B,EAAAA,UAAU,EAAE;AACR,gBAAY;AADJ;AADhB,CAH8B,CAAlC;AAWAC,MAAM,CAACC,OAAP,GAAiB7B,OAAjB","sourcesContent":["import React from 'react'\nimport ReactNative from 'react-native'\nimport PropTypes from 'prop-types';\n\nvar {\n\tNativeModules,\n\tprocessColor,\n\trequireNativeComponent,\n\tView\n} = ReactNative;\n\nvar RNSpinkit = null;\n\nclass Spinkit extends React.Component {\n\n\tstatic propTypes = {\n\t\ttype: PropTypes.string,\n\t\t/**\n\t\t * @prop color\n\t\t * @NOTE This is typically passed as a string, but technically can also be\n\t\t *\ta number (see https://facebook.github.io/react/docs/typechecking-with-proptypes.html).\n\t\t *\tIn addition, allowing a number prop type eliminates the PropType warning\n\t\t *\tReact Native will throw if passing a string into this component but a\n\t\t *\tdifferent type (number) down to the native module.\n\t\t */\n\t\tcolor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\t\tsize: PropTypes.number,\n\t\tisVisible: PropTypes.bool,\n\t\ttestID: PropTypes.string,\n\t\taccessibilityComponentType: PropTypes.string,\n\t\taccessibilityLabel: PropTypes.string,\n\t\taccessibilityLiveRegion: PropTypes.string,\n\t\trenderToHardwareTextureAndroid: PropTypes.bool,\n\t\timportantForAccessibility: PropTypes.string,\n\t\tonLayout: PropTypes.func,\n\t};\n\n\tstatic defaultProps = {\n\t\tsize: 37,\n\t\tcolor: \"#000000\",\n\t\tisVisible: true\n\t};\n\n\trender() {\n\t\tif (!this.props.isVisible) return <View/>;\n\n\t\tvar size = {height: this.props.size, width: this.props.size};\n\n\t\t// In order to handle all the color specifications allowed in React Native\n\t\t// as a whole, we need to call processColor here, and can pass in the\n\t\t// resulting number directly. RCTConvert will be called on iOS to parse\n\t\t// into #AARRGGBB form; on Android, this int can be used directly for\n\t\t// setting the color.\n\t\tvar colorNumber = processColor(this.props.color);\n\n\t\treturn (\n\t\t\t<RNSpinkit\n\t\t\t\ttype={String(this.props.type)}\n\t\t\t\tsize={parseInt(this.props.size)}\n\t\t\t\tcolor={colorNumber}\n\t\t\t\tstyle={[size, this.props.style]}/>\n\t\t);\n\t}\n\n}\n\n// Since RNPM does not recognize `requireNativeComponent`, so we have to\n// add this line, and RNPM will link native modules automatically\nNativeModules.RNSpinkit;\n\n// Native component\nRNSpinkit = requireNativeComponent(\n\t'RNSpinkit',\n\tSpinkit,\n    {\n        nativeOnly: {\n            'nativeID': true\n        }\n    }\n);\n\n\nmodule.exports = Spinkit;\n"]},"metadata":{},"sourceType":"module"}